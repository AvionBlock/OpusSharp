{
  "api/OpusSharp.Core.DecoderCTL.html": {
    "href": "api/OpusSharp.Core.DecoderCTL.html",
    "title": "Enum DecoderCTL | OpusSharp",
    "keywords": "Enum DecoderCTL These are convenience macros for use with the opus_decoder_ctl interface Namespace: OpusSharp.Core Assembly: OpusSharp.dll Syntax public enum DecoderCTL Fields Name Description OPUS_GET_GAIN Gets the decoder's configured gain adjustment. OPUS_GET_LAST_PACKET_DURATION Gets the duration (in samples) of the last packet successfully decoded or concealed. OPUS_GET_PITCH Gets the pitch of the last decoded frame, if available. OPUS_SET_GAIN Configures decoder gain adjustment."
  },
  "api/OpusSharp.Core.EncoderCTL.html": {
    "href": "api/OpusSharp.Core.EncoderCTL.html",
    "title": "Enum EncoderCTL | OpusSharp",
    "keywords": "Enum EncoderCTL These are convenience macros for use with the opus_encoder_ctl interface. Namespace: OpusSharp.Core Assembly: OpusSharp.dll Syntax public enum EncoderCTL Fields Name Description OPUS_GET_APPLICATION Gets the encoder's configured application. OPUS_GET_BITRATE Gets the encoder's bitrate configuration. OPUS_GET_COMPLEXITY Gets the encoder's complexity configuration. OPUS_GET_DRED_DURATION Gets the encoder's configured Deep Redundancy (DRED) maximum number of frames. OPUS_GET_DTX Gets encoder's configured use of discontinuous transmission. OPUS_GET_EXPERT_FRAME_DURATION Gets the encoder's configured use of variable duration frames. OPUS_GET_FORCE_CHANNELS Gets the encoder's forced channel configuration. OPUS_GET_INBAND_FEC Gets encoder's configured use of in-band forward error correction. OPUS_GET_IN_DTX Gets the DTX state of the encoder. OPUS_GET_LOOKAHEAD Gets the total samples of delay added by the entire codec. OPUS_GET_LSB_DEPTH Gets the encoder's configured signal depth. OPUS_GET_MAX_BANDWIDTH Gets the encoder's configured maximum allowed bandpass. OPUS_GET_PACKET_LOSS_PERC Gets the encoder's configured packet loss percentage. OPUS_GET_PREDICTION_DISABLED Gets the encoder's configured prediction status. OPUS_GET_SIGNAL Gets the encoder's configured signal type. OPUS_GET_VBR Determine if variable bitrate (VBR) is enabled in the encoder. OPUS_GET_VBR_CONSTRAINT Determine if constrained VBR is enabled in the encoder. OPUS_SET_APPLICATION Configures the encoder's intended application. OPUS_SET_BANDWIDTH Sets the encoder's bandpass to a specific value. OPUS_SET_BITRATE Configures the bitrate in the encoder. OPUS_SET_COMPLEXITY Configures the encoder's computational complexity. OPUS_SET_DNN_BLOB Provide external DNN weights from binary object (only when explicitly built without the weights). OPUS_SET_DRED_DURATION If non-zero, enables Deep Redundancy (DRED) and use the specified maximum number of 10-ms redundant frames. OPUS_SET_DTX Configures the encoder's use of discontinuous transmission (DTX). OPUS_SET_EXPERT_FRAME_DURATION Configures the encoder's use of variable duration frames. OPUS_SET_FORCE_CHANNELS Configures mono/stereo forcing in the encoder. OPUS_SET_INBAND_FEC Configures the encoder's use of in-band forward error correction (FEC). OPUS_SET_LSB_DEPTH Configures the depth of signal being encoded. OPUS_SET_MAX_BANDWIDTH Configures the maximum bandpass that the encoder will select automatically. OPUS_SET_PACKET_LOSS_PERC Configures the encoder's expected packet loss percentage. OPUS_SET_PREDICTION_DISABLED If set to 1, disables almost all use of prediction, making frames almost completely independent. This reduces quality. OPUS_SET_SIGNAL Configures the type of signal being encoded. OPUS_SET_VBR Enables or disables variable bitrate (VBR) in the encoder. OPUS_SET_VBR_CONSTRAINT Enables or disables constrained VBR in the encoder."
  },
  "api/OpusSharp.Core.GenericCTL.html": {
    "href": "api/OpusSharp.Core.GenericCTL.html",
    "title": "Enum GenericCTL | OpusSharp",
    "keywords": "Enum GenericCTL These macros are used with the opus_decoder_ctl and opus_encoder_ctl calls to generate a particular request. Namespace: OpusSharp.Core Assembly: OpusSharp.dll Syntax public enum GenericCTL Fields Name Description OPUS_GET_BANDWIDTH Gets the encoder's configured bandpass or the decoder's last bandpass. OPUS_GET_FINAL_RANGE Gets the final state of the codec's entropy coder. OPUS_GET_PHASE_INVERSION_DISABLED Gets the encoder's configured phase inversion status. OPUS_GET_SAMPLE_RATE Gets the sampling rate the encoder or decoder was initialized with. OPUS_RESET_STATE Resets the codec state to be equivalent to a freshly initialized state. OPUS_SET_PHASE_INVERSION_DISABLED If set to 1, disables the use of phase inversion for intensity stereo, improving the quality of mono down-mixes, but slightly reducing normal stereo quality."
  },
  "api/OpusSharp.Core.MultistreamCTL.html": {
    "href": "api/OpusSharp.Core.MultistreamCTL.html",
    "title": "Enum MultistreamCTL | OpusSharp",
    "keywords": "Enum MultistreamCTL These are convenience macros that are specific to the opus_multistream_encoder_ctl() and opus_multistream_decoder_ctl() interface. Namespace: OpusSharp.Core Assembly: OpusSharp.dll Syntax public enum MultistreamCTL Fields Name Description OPUS_MULTISTREAM_GET_DECODER_STATE Gets the decoder state for an individual stream of a multi-stream decoder. OPUS_MULTISTREAM_GET_ENCODER_STATE Gets the encoder state for an individual stream of a multi-stream encoder."
  },
  "api/OpusSharp.Core.NativeOpus.html": {
    "href": "api/OpusSharp.Core.NativeOpus.html",
    "title": "Class NativeOpus | OpusSharp",
    "keywords": "Class NativeOpus Native opus handler that directly calls the exported opus functions. Inheritance object NativeOpus Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: OpusSharp.Core Assembly: OpusSharp.dll Syntax public static class NativeOpus Methods opus_decode(OpusDecoderSafeHandle, byte*, int, short*, int, int) Decode an Opus packet. Declaration public static extern int opus_decode(OpusDecoderSafeHandle st, byte* data, int len, short* pcm, int frame_size, int decode_fec) Parameters Type Name Description OpusDecoderSafeHandle st Decoder state. byte* data Input payload. Use a NULL pointer to indicate packet loss. int len Number of bytes in payload. short* pcm Output signal (interleaved if 2 channels). length is frame_sizechannelssizeof(short). int frame_size Number of samples per channel of available space in pcm. If this is less than the maximum packet duration (120ms; 5760 for 48kHz), this function will not be capable of decoding some packets. In the case of PLC (data==NULL) or FEC (decode_fec=1), then frame_size needs to be exactly the duration of audio that is missing, otherwise the decoder will not be in the optimal state to decode the next incoming packet. For the PLC and FEC cases, frame_size must be a multiple of 2.5 ms. int decode_fec Flag (0 or 1) to request that any in-band forward error correction data be decoded. If no such data is available, the frame is decoded as if it were lost. Returns Type Description int Number of decoded samples or OpusErrorCodes. opus_decode_float(OpusDecoderSafeHandle, byte*, int, float*, int, int) Decode an Opus packet with floating point output. Declaration public static extern int opus_decode_float(OpusDecoderSafeHandle st, byte* data, int len, float* pcm, int frame_size, int decode_fec) Parameters Type Name Description OpusDecoderSafeHandle st Decoder state. byte* data Input payload. Use a NULL pointer to indicate packet loss. int len Number of bytes in payload. float* pcm Output signal (interleaved if 2 channels). length is frame_sizechannelssizeof(float). int frame_size Number of samples per channel of available space in pcm. If this is less than the maximum packet duration (120ms; 5760 for 48kHz), this function will not be capable of decoding some packets. In the case of PLC (data==NULL) or FEC (decode_fec=1), then frame_size needs to be exactly the duration of audio that is missing, otherwise the decoder will not be in the optimal state to decode the next incoming packet. For the PLC and FEC cases, frame_size must be a multiple of 2.5 ms. int decode_fec Flag (0 or 1) to request that any in-band forward error correction data be decoded. If no such data is available the frame is decoded as if it were lost. Returns Type Description int Number of decoded samples or OpusErrorCodes opus_decoder_create(int, int, int*) Allocates and initializes a OpusDecoderSafeHandle state. Declaration public static extern OpusDecoderSafeHandle opus_decoder_create(int Fs, int channels, int* error) Parameters Type Name Description int Fs Sample rate to decode at (Hz). This must be one of 8000, 12000, 16000, 24000, or 48000. int channels Number of channels (1 or 2) to decode. int* error OPUS_OK Success or OpusErrorCodes. Returns Type Description OpusDecoderSafeHandle OpusDecoderSafeHandle opus_decoder_ctl(OpusDecoderSafeHandle, int) Perform a CTL function on an OpusDecoderSafeHandle. Declaration public static extern int opus_decoder_ctl(OpusDecoderSafeHandle st, int request) Parameters Type Name Description OpusDecoderSafeHandle st Decoder state. int request This and all remaining parameters should be replaced by one of the convenience macros in GenericCTL or DecoderCTL. Returns Type Description int OpusErrorCodes opus_decoder_ctl(OpusDecoderSafeHandle, int, void*) Perform a CTL function on an OpusDecoderSafeHandle. Declaration public static extern int opus_decoder_ctl(OpusDecoderSafeHandle st, int request, void* data) Parameters Type Name Description OpusDecoderSafeHandle st Decoder state. int request This and all remaining parameters should be replaced by one of the convenience macros in GenericCTL or DecoderCTL. void* data The data to input or output. Returns Type Description int OpusErrorCodes opus_decoder_destroy(IntPtr) Frees an OpusDecoderSafeHandle allocated by opus_decoder_create(int, int, int*). Declaration public static extern void opus_decoder_destroy(IntPtr st) Parameters Type Name Description IntPtr st State to be freed. opus_decoder_dred_decode(OpusDecoderSafeHandle, OpusDREDSafeHandle, int, short*, int) Decode audio from an OpusDREDSafeHandle packet with floating point output. Declaration public static extern int opus_decoder_dred_decode(OpusDecoderSafeHandle st, OpusDREDSafeHandle dred, int dred_offset, short* pcm, int frame_size) Parameters Type Name Description OpusDecoderSafeHandle st Decoder state. OpusDREDSafeHandle dred DRED state. int dred_offset position of the redundancy to decode (in samples before the beginning of the real audio data in the packet). short* pcm Output signal (interleaved if 2 channels). length is frame_sizechannelssizeof(short) int frame_size Number of samples per channel to decode in pcm. frame_size must be a multiple of 2.5 ms. Returns Type Description int Number of decoded samples or OpusErrorCodes. opus_decoder_dred_decode_float(OpusDecoderSafeHandle, OpusDREDSafeHandle, int, float*, int) Decode audio from an OpusDREDSafeHandle packet with floating point output. Declaration public static extern int opus_decoder_dred_decode_float(OpusDecoderSafeHandle st, OpusDREDSafeHandle dred, int dred_offset, float* pcm, int frame_size) Parameters Type Name Description OpusDecoderSafeHandle st Decoder state. OpusDREDSafeHandle dred DRED state. int dred_offset position of the redundancy to decode (in samples before the beginning of the real audio data in the packet). float* pcm Output signal (interleaved if 2 channels). length is frame_sizechannelssizeof(float). int frame_size Number of samples per channel to decode in pcm. frame_size must be a multiple of 2.5 ms. Returns Type Description int Number of decoded samples or OpusErrorCodes. opus_decoder_get_nb_samples(OpusDecoderSafeHandle, byte*, int) Gets the number of samples of an Opus packet. Declaration public static extern int opus_decoder_get_nb_samples(OpusDecoderSafeHandle dec, byte* packet, int len) Parameters Type Name Description OpusDecoderSafeHandle dec Decoder state. byte* packet Opus packet. int len Length of packet. Returns Type Description int Number of samples or OpusErrorCodes. opus_decoder_get_size(int) Gets the size of an OpusDecoderSafeHandle structure. Declaration public static extern int opus_decoder_get_size(int channels) Parameters Type Name Description int channels Number of channels. This must be 1 or 2. Returns Type Description int The size in bytes. opus_decoder_init(OpusDecoderSafeHandle, int, int) Initializes a previously allocated OpusDecoderSafeHandle state. Declaration public static extern int opus_decoder_init(OpusDecoderSafeHandle st, int Fs, int channels) Parameters Type Name Description OpusDecoderSafeHandle st Decoder state. int Fs Sampling rate to decode to (Hz). This must be one of 8000, 12000, 16000, 24000, or 48000. int channels Number of channels (1 or 2) to decode. Returns Type Description int OPUS_OK Success or OpusErrorCodes. opus_dred_alloc(int*) Allocates and initializes a OpusDREDSafeHandle state. Declaration public static extern OpusDREDSafeHandle opus_dred_alloc(int* error) Parameters Type Name Description int* error OPUS_OK Success or OpusErrorCodes. Returns Type Description OpusDREDSafeHandle OpusDREDSafeHandle opus_dred_decoder_create(int*) Allocates and initializes an OpusDREDDecoderSafeHandle state. Declaration public static extern OpusDREDDecoderSafeHandle opus_dred_decoder_create(int* error) Parameters Type Name Description int* error OPUS_OK Success or OpusErrorCodes. Returns Type Description OpusDREDDecoderSafeHandle OpusDREDDecoderSafeHandle opus_dred_decoder_ctl(OpusDREDDecoderSafeHandle, int) Perform a CTL function on an OpusDREDDecoderSafeHandle. Declaration public static extern int opus_dred_decoder_ctl(OpusDREDDecoderSafeHandle dred_dec, int request) Parameters Type Name Description OpusDREDDecoderSafeHandle dred_dec DRED Decoder state. int request This and all remaining parameters should be replaced by one of the convenience macros in GenericCTL or DecoderCTL. Returns Type Description int OpusErrorCodes opus_dred_decoder_ctl(OpusDREDDecoderSafeHandle, int, void*) Perform a CTL function on an OpusDREDDecoderSafeHandle. Declaration public static extern int opus_dred_decoder_ctl(OpusDREDDecoderSafeHandle dred_dec, int request, void* data) Parameters Type Name Description OpusDREDDecoderSafeHandle dred_dec DRED Decoder state. int request This and all remaining parameters should be replaced by one of the convenience macros in GenericCTL or DecoderCTL. void* data The data to input or output. Returns Type Description int OpusErrorCodes opus_dred_decoder_destroy(IntPtr) Frees an OpusDREDDecoderSafeHandle allocated by opus_dred_decoder_create(int*). Declaration public static extern void opus_dred_decoder_destroy(IntPtr dec) Parameters Type Name Description IntPtr dec State to be freed. opus_dred_decoder_get_size() Gets the size of an OpusDREDDecoderSafeHandle structure. Declaration public static extern int opus_dred_decoder_get_size() Returns Type Description int The size in bytes. opus_dred_decoder_init(OpusDREDDecoderSafeHandle) Initializes an OpusDREDDecoderSafeHandle state. Declaration public static extern int opus_dred_decoder_init(OpusDREDDecoderSafeHandle dec) Parameters Type Name Description OpusDREDDecoderSafeHandle dec State to be initialized. Returns Type Description int OpusErrorCodes opus_dred_free(IntPtr) Frees an OpusDREDSafeHandle allocated by opus_dred_alloc(int*). Declaration public static extern void opus_dred_free(IntPtr dec) Parameters Type Name Description IntPtr dec State to be freed. opus_dred_get_size() Gets the size of an OpusDREDSafeHandle structure. Declaration public static extern int opus_dred_get_size() Returns Type Description int The size in bytes. opus_dred_parse(OpusDREDDecoderSafeHandle, OpusDREDSafeHandle, byte*, int, int, int, int*, int) Decode an Opus DRED packet. Declaration public static extern int opus_dred_parse(OpusDREDDecoderSafeHandle dred_dec, OpusDREDSafeHandle dred, byte* data, int len, int max_dred_samples, int sampling_rate, int* dred_end, int defer_processing) Parameters Type Name Description OpusDREDDecoderSafeHandle dred_dec DRED Decoder state. OpusDREDSafeHandle dred DRED state. byte* data Input payload. int len Number of bytes in payload. int max_dred_samples Maximum number of DRED samples that may be needed (if available in the packet). int sampling_rate Sampling rate used for max_dred_samples argument. Needs not match the actual sampling rate of the decoder. int* dred_end Number of non-encoded (silence) samples between the DRED timestamp and the last DRED sample. int defer_processing Flag (0 or 1). If set to one, the CPU-intensive part of the DRED decoding is deferred until opus_dred_process(OpusDREDDecoderSafeHandle, OpusDREDSafeHandle, OpusDREDSafeHandle) is called. Returns Type Description int Offset (positive) of the first decoded DRED samples, zero if no DRED is present, or OpusErrorCodes opus_dred_process(OpusDREDDecoderSafeHandle, OpusDREDSafeHandle, OpusDREDSafeHandle) Finish decoding an OpusDREDSafeHandle packet. Declaration public static extern int opus_dred_process(OpusDREDDecoderSafeHandle dred_dec, OpusDREDSafeHandle src, OpusDREDSafeHandle dst) Parameters Type Name Description OpusDREDDecoderSafeHandle dred_dec DRED Decoder state. OpusDREDSafeHandle src Source DRED state to start the processing from. OpusDREDSafeHandle dst Destination DRED state to store the updated state after processing. Returns Type Description int OpusErrorCodes opus_encode(OpusEncoderSafeHandle, short*, int, byte*, int) Encodes an Opus frame. Declaration public static extern int opus_encode(OpusEncoderSafeHandle st, short* pcm, int frame_size, byte* data, int max_data_bytes) Parameters Type Name Description OpusEncoderSafeHandle st Encoder state. short* pcm Input signal (interleaved if 2 channels). length is frame_sizechannelssizeof(short) int frame_size Number of samples per channel in the input signal. This must be an Opus frame size for the encoder's sampling rate. For example, at 48 kHz the permitted values are 120, 240, 480, 960, 1920, and 2880. Passing in a duration of less than 10 ms (480 samples at 48 kHz) will prevent the encoder from using the LPC or hybrid modes. byte* data Output payload. This must contain storage for at least max_data_bytes. int max_data_bytes Size of the allocated memory for the output payload. This may be used to impose an upper limit on the instant bitrate, but should not be used as the only bitrate control. Use OPUS_SET_BITRATE to control the bitrate. Returns Type Description int The length of the encoded packet (in bytes) on success or a negative error code (see OpusErrorCodes) on failure. opus_encode_float(OpusEncoderSafeHandle, float*, int, byte*, int) Encodes an Opus frame from floating point input. Declaration public static extern int opus_encode_float(OpusEncoderSafeHandle st, float* pcm, int frame_size, byte* data, int max_data_bytes) Parameters Type Name Description OpusEncoderSafeHandle st Encoder state. float* pcm Input in float format (interleaved if 2 channels), with a normal range of +/-1.0. Samples with a range beyond +/-1.0 are supported but will be clipped by decoders using the integer API and should only be used if it is known that the far end supports extended dynamic range. length is frame_sizechannelssizeof(float) int frame_size Number of samples per channel in the input signal. This must be an Opus frame size for the encoder's sampling rate. For example, at 48 kHz the permitted values are 120, 240, 480, 960, 1920, and 2880. Passing in a duration of less than 10 ms (480 samples at 48 kHz) will prevent the encoder from using the LPC or hybrid modes. byte* data Output payload. This must contain storage for at least max_data_bytes. int max_data_bytes Size of the allocated memory for the output payload. This may be used to impose an upper limit on the instant bitrate, but should not be used as the only bitrate control. Use OPUS_SET_BITRATE to control the bitrate. Returns Type Description int The length of the encoded packet (in bytes) on success or a negative error code (see OpusErrorCodes) on failure. opus_encoder_create(int, int, int, int*) Allocates and initializes an encoder state. Declaration public static extern OpusEncoderSafeHandle opus_encoder_create(int Fs, int channels, int application, int* error) Parameters Type Name Description int Fs Sampling rate of input signal (Hz) This must be one of 8000, 12000, 16000, 24000, or 48000. int channels Number of channels (1 or 2) in input signal. int application Coding mode (one of OPUS_APPLICATION_VOIP, OPUS_APPLICATION_AUDIO or OPUS_APPLICATION_RESTRICTED_LOWDELAY) int* error OPUS_OK Success or OpusErrorCodes. Returns Type Description OpusEncoderSafeHandle OpusEncoderSafeHandle opus_encoder_ctl(OpusEncoderSafeHandle, int) Perform a CTL function on an OpusEncoderSafeHandle. Declaration public static extern int opus_encoder_ctl(OpusEncoderSafeHandle st, int request) Parameters Type Name Description OpusEncoderSafeHandle st Encoder state. int request This and all remaining parameters should be replaced by one of the convenience macros in GenericCTL or EncoderCTL. Returns Type Description int OpusErrorCodes opus_encoder_ctl(OpusEncoderSafeHandle, int, void*) Perform a CTL function on an OpusEncoderSafeHandle. Declaration public static extern int opus_encoder_ctl(OpusEncoderSafeHandle st, int request, void* data) Parameters Type Name Description OpusEncoderSafeHandle st Encoder state. int request This and all remaining parameters should be replaced by one of the convenience macros in GenericCTL or EncoderCTL. void* data The data to input/output. Returns Type Description int OpusErrorCodes opus_encoder_ctl(OpusEncoderSafeHandle, int, void*, void*) Perform a CTL function on an Opus encoder. Declaration public static extern int opus_encoder_ctl(OpusEncoderSafeHandle st, int request, void* data, void* data2) Parameters Type Name Description OpusEncoderSafeHandle st Encoder state. int request This and all remaining parameters should be replaced by one of the convenience macros in GenericCTL or EncoderCTL. void* data The data to input/output. void* data2 The second data to input/output. Returns Type Description int OpusErrorCodes opus_encoder_destroy(IntPtr) Frees an OpusEncoderSafeHandle allocated by opus_encoder_create(int, int, int, int*). Declaration public static extern void opus_encoder_destroy(IntPtr st) Parameters Type Name Description IntPtr st State to be freed. opus_encoder_get_size(int) Gets the size of an OpusEncoderSafeHandle structure. Declaration public static extern int opus_encoder_get_size(int channels) Parameters Type Name Description int channels Number of channels. This must be 1 or 2. Returns Type Description int The size in bytes. opus_encoder_init(OpusEncoderSafeHandle, int, int, int) Initializes a previously allocated OpusEncoderSafeHandle state. The memory pointed to by st must be at least the size returned by opus_encoder_get_size(int). Declaration public static extern int opus_encoder_init(OpusEncoderSafeHandle st, int Fs, int channels, int application) Parameters Type Name Description OpusEncoderSafeHandle st Encoder state. int Fs Sampling rate of input signal (Hz) This must be one of 8000, 12000, 16000, 24000, or 48000. int channels Number of channels (1 or 2) in input signal. int application Coding mode (one of OPUS_APPLICATION_VOIP, OPUS_APPLICATION_AUDIO or OPUS_APPLICATION_RESTRICTED_LOWDELAY) Returns Type Description int OpusErrorCodes opus_get_version_string() Gets the libopus version string. Declaration public static extern byte* opus_get_version_string() Returns Type Description byte* Version string opus_multistream_decode(OpusMSDecoderSafeHandle, byte*, int, short*, int, int) Decode a multistream Opus packet. Declaration public static extern int opus_multistream_decode(OpusMSDecoderSafeHandle st, byte* data, int len, short* pcm, int frame_size, int decode_fec) Parameters Type Name Description OpusMSDecoderSafeHandle st Multistream decoder state. byte* data Input payload. Use a NULL pointer to indicate packet loss. int len Number of bytes in payload. short* pcm Output signal, with interleaved samples. This must contain room for frame_size*channels samples. int frame_size The number of samples per channel of available space in pcm. If this is less than the maximum packet duration (120 ms; 5760 for 48kHz), this function will not be capable of decoding some packets. In the case of PLC (data==NULL) or FEC (decode_fec=1), then frame_size needs to be exactly the duration of audio that is missing, otherwise the decoder will not be in the optimal state to decode the next incoming packet. For the PLC and FEC cases, frame_size must be a multiple of 2.5 ms. int decode_fec Flag (0 or 1) to request that any in-band forward error correction data be decoded. If no such data is available, the frame is decoded as if it were lost. Returns Type Description int Number of samples decoded on success or a negative error code (see OpusErrorCodes) on failure. opus_multistream_decode_float(OpusMSDecoderSafeHandle, byte*, int, float*, int, int) Decode a multistream Opus packet with floating point output. Declaration public static extern int opus_multistream_decode_float(OpusMSDecoderSafeHandle st, byte* data, int len, float* pcm, int frame_size, int decode_fec) Parameters Type Name Description OpusMSDecoderSafeHandle st Multistream decoder state. byte* data Input payload. Use a NULL pointer to indicate packet loss. int len Number of bytes in payload. float* pcm Output signal, with interleaved samples. This must contain room for frame_size*channels samples. int frame_size The number of samples per channel of available space in pcm. If this is less than the maximum packet duration (120 ms; 5760 for 48kHz), this function will not be capable of decoding some packets. In the case of PLC (data==NULL) or FEC (decode_fec=1), then frame_size needs to be exactly the duration of audio that is missing, otherwise the decoder will not be in the optimal state to decode the next incoming packet. For the PLC and FEC cases, frame_size must be a multiple of 2.5 ms. int decode_fec Flag (0 or 1) to request that any in-band forward error correction data be decoded. If no such data is available, the frame is decoded as if it were lost. Returns Type Description int Number of samples decoded on success or a negative error code (see OpusErrorCodes) on failure. opus_multistream_decoder_create(int, int, int, int, byte*, int*) Allocates and initializes a OpusMSDecoderSafeHandle state. Declaration public static extern OpusMSDecoderSafeHandle opus_multistream_decoder_create(int Fs, int channels, int streams, int coupled_streams, byte* mapping, int* error) Parameters Type Name Description int Fs Sampling rate to decode at (in Hz). This must be one of 8000, 12000, 16000, 24000, or 48000. int channels Number of channels to output. This must be at most 255. It may be different from the number of coded channels (streams + coupled_streams). int streams The total number of streams coded in the input. This must be no more than 255. int coupled_streams Number of streams to decode as coupled (2 channel) streams. This must be no larger than the total number of streams. Additionally, The total number of coded channels (streams + coupled_streams) must be no more than 255. byte* mapping Mapping from coded channels to output channels, as described in Opus Multistream API. int* error Returns OPUS_OK on success, or an error code (see OpusErrorCodes) on failure. Returns Type Description OpusMSDecoderSafeHandle OpusMSDecoderSafeHandle opus_multistream_decoder_ctl(OpusMSDecoderSafeHandle, int) Perform a CTL function on a OpusMSEncoderSafeHandle. Declaration public static extern int opus_multistream_decoder_ctl(OpusMSDecoderSafeHandle st, int request) Parameters Type Name Description OpusMSDecoderSafeHandle st Multistream decoder state. int request This and all remaining parameters should be replaced by one of the convenience macros in GenericCTL, DecoderCTL, or MultistreamCTL specific encoder and decoder CTLs. Returns Type Description int OpusErrorCodes opus_multistream_decoder_ctl(OpusMSDecoderSafeHandle, int, void*) Perform a CTL function on a OpusMSEncoderSafeHandle. Declaration public static extern int opus_multistream_decoder_ctl(OpusMSDecoderSafeHandle st, int request, void* data) Parameters Type Name Description OpusMSDecoderSafeHandle st Multistream decoder state. int request This and all remaining parameters should be replaced by one of the convenience macros in GenericCTL, DecoderCTL, or MultistreamCTL specific encoder and decoder CTLs. void* data The input/output data. Returns Type Description int OpusErrorCodes opus_multistream_decoder_ctl(OpusMSDecoderSafeHandle, int, void*, void*) Perform a CTL function on a OpusMSEncoderSafeHandle. Declaration public static extern int opus_multistream_decoder_ctl(OpusMSDecoderSafeHandle st, int request, void* data, void* data2) Parameters Type Name Description OpusMSDecoderSafeHandle st Multistream decoder state. int request This and all remaining parameters should be replaced by one of the convenience macros in GenericCTL, DecoderCTL, or MultistreamCTL specific encoder and decoder CTLs. void* data The input/output data. void* data2 The input/output data. Returns Type Description int OpusErrorCodes opus_multistream_decoder_destroy(IntPtr) Frees an OpusMSDecoderSafeHandle allocated by opus_multistream_decoder_create(int, int, int, int, byte*, int*). Declaration public static extern void opus_multistream_decoder_destroy(IntPtr st) Parameters Type Name Description IntPtr st Multistream decoder state to be freed. opus_multistream_decoder_get_size(int, int) Gets the size of an OpusMSDecoderSafeHandle structure. Declaration public static extern int opus_multistream_decoder_get_size(int streams, int coupled_streams) Parameters Type Name Description int streams The total number of streams coded in the input. This must be no more than 255. int coupled_streams Number streams to decode as coupled (2 channel) streams. This must be no larger than the total number of streams. Additionally, The total number of coded channels (streams + coupled_streams) must be no more than 255. Returns Type Description int The size in bytes on success, or a negative error code (see OpusErrorCodes) on error. opus_multistream_decoder_init(OpusMSDecoderSafeHandle, int, int, int, int, byte*) Intialize a previously allocated OpusMSDecoderSafeHandle state object. Declaration public static extern int opus_multistream_decoder_init(OpusMSDecoderSafeHandle st, int Fs, int channels, int streams, int coupled_streams, byte* mapping) Parameters Type Name Description OpusMSDecoderSafeHandle st Multistream encoder state to initialize. int Fs Sampling rate to decode at (in Hz). This must be one of 8000, 12000, 16000, 24000, or 48000. int channels Number of channels to output. This must be at most 255. It may be different from the number of coded channels (streams + coupled_streams). int streams The total number of streams coded in the input. This must be no more than 255. int coupled_streams Number of streams to decode as coupled (2 channel) streams. This must be no larger than the total number of streams. Additionally, The total number of coded channels (streams + coupled_streams) must be no more than 255. byte* mapping Mapping from coded channels to output channels, as described in Opus Multistream API. Returns Type Description int OPUS_OK on success, or an error code (see OpusErrorCodes) on failure. opus_multistream_encode(OpusMSEncoderSafeHandle, short*, int, byte*, int) Encodes a multistream Opus frame. Declaration public static extern int opus_multistream_encode(OpusMSEncoderSafeHandle st, short* pcm, int frame_size, byte* data, int max_data_bytes) Parameters Type Name Description OpusMSEncoderSafeHandle st Multistream encoder state. short* pcm The input signal as interleaved samples. This must contain frame_size*channels samples. int frame_size Number of samples per channel in the input signal. This must be an Opus frame size for the encoder's sampling rate. For example, at 48 kHz the permitted values are 120, 240, 480, 960, 1920, and 2880. Passing in a duration of less than 10 ms (480 samples at 48 kHz) will prevent the encoder from using the LPC or hybrid modes. byte* data Output payload. This must contain storage for at least max_data_bytes. int max_data_bytes Size of the allocated memory for the output payload. This may be used to impose an upper limit on the instant bitrate, but should not be used as the only bitrate control. Use OPUS_SET_BITRATE to control the bitrate. Returns Type Description int The length of the encoded packet (in bytes) on success or a negative error code (see OpusErrorCodes) on failure. opus_multistream_encode_float(OpusMSEncoderSafeHandle, float*, int, byte*, int) Encodes a multistream Opus frame from floating point input. Declaration public static extern int opus_multistream_encode_float(OpusMSEncoderSafeHandle st, float* pcm, int frame_size, byte* data, int max_data_bytes) Parameters Type Name Description OpusMSEncoderSafeHandle st Multistream encoder state. float* pcm The input signal as interleaved samples with a normal range of +/-1.0. Samples with a range beyond +/-1.0 are supported but will be clipped by decoders using the integer API and should only be used if it is known that the far end supports extended dynamic range. This must contain frame_size*channels samples. int frame_size Number of samples per channel in the input signal. This must be an Opus frame size for the encoder's sampling rate. For example, at 48 kHz the permitted values are 120, 240, 480, 960, 1920, and 2880. Passing in a duration of less than 10 ms (480 samples at 48 kHz) will prevent the encoder from using the LPC or hybrid modes. byte* data Output payload. This must contain storage for at least max_data_bytes. int max_data_bytes Size of the allocated memory for the output payload. This may be used to impose an upper limit on the instant bitrate, but should not be used as the only bitrate control. Use OPUS_SET_BITRATE to control the bitrate. Returns Type Description int The length of the encoded packet (in bytes) on success or a negative error code (see OpusErrorCodes) on failure. opus_multistream_encoder_create(int, int, int, int, byte*, int, int*) Allocates and initializes a OpusMSEncoderSafeHandle state. Declaration public static extern OpusMSEncoderSafeHandle opus_multistream_encoder_create(int Fs, int channels, int streams, int coupled_streams, byte* mapping, int application, int* error) Parameters Type Name Description int Fs Sampling rate of the input signal (in Hz). This must be one of 8000, 12000, 16000, 24000, or 48000. int channels Number of channels in the input signal. This must be at most 255. It may be greater than the number of coded channels (streams + coupled_streams). int streams The total number of streams to encode from the input. This must be no more than the number of channels. int coupled_streams Number of coupled (2 channel) streams to encode. This must be no larger than the total number of streams. Additionally, The total number of encoded channels (streams + coupled_streams) must be no more than the number of input channels. byte* mapping Mapping from encoded channels to input channels, as described in Opus Multistream API. As an extra constraint, the multistream encoder does not allow encoding coupled streams for which one channel is unused since this is never a good idea. int application The target encoder application. This must be one of the following: OPUS_APPLICATION_VOIP, OPUS_APPLICATION_AUDIO or OPUS_APPLICATION_RESTRICTED_LOWDELAY. int* error Returns OPUS_OK on success, or an error code (see OpusErrorCodes) on failure. Returns Type Description OpusMSEncoderSafeHandle OpusMSEncoderSafeHandle opus_multistream_encoder_ctl(OpusMSEncoderSafeHandle, int) Perform a CTL function on a OpusMSEncoderSafeHandle. Declaration public static extern int opus_multistream_encoder_ctl(OpusMSEncoderSafeHandle st, int request) Parameters Type Name Description OpusMSEncoderSafeHandle st Multistream encoder state. int request This and all remaining parameters should be replaced by one of the convenience macros in GenericCTL, EncoderCTL, or MultistreamCTL specific encoder and decoder CTLs. Returns Type Description int OpusErrorCodes opus_multistream_encoder_ctl(OpusMSEncoderSafeHandle, int, void*) Perform a CTL function on a OpusMSEncoderSafeHandle. Declaration public static extern int opus_multistream_encoder_ctl(OpusMSEncoderSafeHandle st, int request, void* data) Parameters Type Name Description OpusMSEncoderSafeHandle st Multistream encoder state. int request This and all remaining parameters should be replaced by one of the convenience macros in GenericCTL, EncoderCTL, or MultistreamCTL specific encoder and decoder CTLs. void* data The input/output data. Returns Type Description int OpusErrorCodes opus_multistream_encoder_ctl(OpusMSEncoderSafeHandle, int, void*, void*) Perform a CTL function on a OpusMSEncoderSafeHandle. Declaration public static extern int opus_multistream_encoder_ctl(OpusMSEncoderSafeHandle st, int request, void* data, void* data2) Parameters Type Name Description OpusMSEncoderSafeHandle st Multistream encoder state. int request This and all remaining parameters should be replaced by one of the convenience macros in GenericCTL, EncoderCTL, or MultistreamCTL specific encoder and decoder CTLs. void* data The input/output data. void* data2 The input/output data. Returns Type Description int OpusErrorCodes opus_multistream_encoder_destroy(IntPtr) Frees an OpusMSEncoderSafeHandle allocated by opus_multistream_encoder_create(int, int, int, int, byte*, int, int*). Declaration public static extern void opus_multistream_encoder_destroy(IntPtr st) Parameters Type Name Description IntPtr st Multistream encoder state to be freed. opus_multistream_encoder_get_size(int, int) Gets the size of an OpusMSEncoderSafeHandle structure. Declaration public static extern int opus_multistream_encoder_get_size(int streams, int coupled_streams) Parameters Type Name Description int streams The total number of streams to encode from the input. This must be no more than 255. int coupled_streams Number of coupled (2 channel) streams to encode. This must be no larger than the total number of streams. Additionally, The total number of encoded channels (streams + coupled_streams) must be no more than 255. Returns Type Description int The size in bytes on success, or a negative error code (see OpusErrorCodes) on error. opus_multistream_encoder_init(OpusMSEncoderSafeHandle, int, int, int, int, byte*, int) Initialize a previously allocated OpusMSEncoderSafeHandle state. Declaration public static extern int opus_multistream_encoder_init(OpusMSEncoderSafeHandle st, int Fs, int channels, int streams, int coupled_streams, byte* mapping, int application) Parameters Type Name Description OpusMSEncoderSafeHandle st Multistream encoder state to initialize. int Fs Sampling rate of the input signal (in Hz). This must be one of 8000, 12000, 16000, 24000, or 48000. int channels Number of channels in the input signal. This must be at most 255. It may be greater than the number of coded channels (streams + coupled_streams). int streams The total number of streams to encode from the input. This must be no more than the number of channels. int coupled_streams Number of coupled (2 channel) streams to encode. This must be no larger than the total number of streams. Additionally, The total number of encoded channels (streams + coupled_streams) must be no more than the number of input channels. byte* mapping Mapping from encoded channels to input channels, as described in Opus Multistream API. As an extra constraint, the multistream encoder does not allow encoding coupled streams for which one channel is unused since this is never a good idea. int application The target encoder application. This must be one of the following: OPUS_APPLICATION_VOIP, OPUS_APPLICATION_AUDIO or OPUS_APPLICATION_RESTRICTED_LOWDELAY. Returns Type Description int OPUS_OK on success, or an error code (see OpusErrorCodes) on failure. opus_multistream_packet_pad(byte*, int, int, int) Pads a given Opus multi-stream packet to a larger size (possibly changing the TOC sequence). Declaration public static extern int opus_multistream_packet_pad(byte* data, int len, int new_len, int nb_streams) Parameters Type Name Description byte* data The buffer containing the packet to pad. int len The size of the packet. This must be at least 1. int new_len The desired size of the packet after padding. This must be at least 1. int nb_streams The number of streams (not channels) in the packet. This must be at least as large as len. Returns Type Description int OpusErrorCodes opus_multistream_packet_unpad(byte*, int, int) Remove all padding from a given Opus multi-stream packet and rewrite the TOC sequence to minimize space usage. Declaration public static extern int opus_multistream_packet_unpad(byte* data, int len, int nb_streams) Parameters Type Name Description byte* data The buffer containing the packet to strip. int len The size of the packet. This must be at least 1. int nb_streams The number of streams (not channels) in the packet. This must be at least 1. Returns Type Description int The new size of the output packet on success, or an OpusErrorCodes on failure. opus_multistream_surround_encoder_create(int, int, int, int*, int*, byte*, int, int*) N.A. Declaration public static extern OpusMSEncoderSafeHandle opus_multistream_surround_encoder_create(int Fs, int channels, int mapping_family, int* streams, int* coupled_streams, byte* mapping, int application, int* error) Parameters Type Name Description int Fs int channels int mapping_family int* streams int* coupled_streams byte* mapping int application int* error Returns Type Description OpusMSEncoderSafeHandle opus_multistream_surround_encoder_get_size(int, int) N.A. Declaration public static extern int opus_multistream_surround_encoder_get_size(int channels, int mapping_family) Parameters Type Name Description int channels int mapping_family Returns Type Description int opus_multistream_surround_encoder_init(OpusMSEncoderSafeHandle, int, int, int, int*, int*, byte*, int) N.A. Declaration public static extern int opus_multistream_surround_encoder_init(OpusMSEncoderSafeHandle st, int Fs, int channels, int mapping_family, int* streams, int* coupled_streams, byte* mapping, int application) Parameters Type Name Description OpusMSEncoderSafeHandle st int Fs int channels int mapping_family int* streams int* coupled_streams byte* mapping int application Returns Type Description int opus_packet_get_bandwidth(byte*) Gets the bandwidth of an Opus packet. Declaration public static extern int opus_packet_get_bandwidth(byte* data) Parameters Type Name Description byte* data Opus packet. Returns Type Description int OpusPredefinedValues or OpusErrorCodes opus_packet_get_nb_channels(byte*) Gets the number of channels from an Opus packet. Declaration public static extern int opus_packet_get_nb_channels(byte* data) Parameters Type Name Description byte* data Opus packet. Returns Type Description int Number of channels or OpusErrorCodes. opus_packet_get_nb_frames(byte*, int) Gets the number of frames in an Opus packet. Declaration public static extern int opus_packet_get_nb_frames(byte* packet, int len) Parameters Type Name Description byte* packet Opus packet. int len Length of packet. Returns Type Description int Number of frames or OpusErrorCodes. opus_packet_get_nb_samples(byte*, int, int) Gets the number of samples of an Opus packet. Declaration public static extern int opus_packet_get_nb_samples(byte* packet, int len, int Fs) Parameters Type Name Description byte* packet Opus packet. int len Length of packet. int Fs Sampling rate in Hz. This must be a multiple of 400, or inaccurate results will be returned. Returns Type Description int Number of samples or OpusErrorCodes. opus_packet_get_samples_per_frame(byte*, int) Gets the number of samples per frame from an Opus packet. Declaration public static extern int opus_packet_get_samples_per_frame(byte* data, int Fs) Parameters Type Name Description byte* data Opus packet. This must contain at least one byte of data. int Fs Sampling rate in Hz. This must be a multiple of 400, or inaccurate results will be returned. Returns Type Description int Number of samples per frame. opus_packet_has_lbrr(byte*, int) Checks whether an Opus packet has LBRR. Declaration public static extern int opus_packet_has_lbrr(byte* packet, int len) Parameters Type Name Description byte* packet Opus packet. int len Length of packet. Returns Type Description int 1 is LBRR is present, 0 otherwise or OpusErrorCodes opus_packet_pad(byte*, int, int) Pads a given Opus packet to a larger size (possibly changing the TOC sequence). Declaration public static extern int opus_packet_pad(byte* data, int len, int new_len) Parameters Type Name Description byte* data The buffer containing the packet to pad. int len The size of the packet. This must be at least 1. int new_len The desired size of the packet after padding. This must be at least as large as len. Returns Type Description int OpusErrorCodes opus_packet_parse(byte*, int, byte*, byte*[], short[], int*) Parse an opus packet into one or more frames. Declaration public static extern int opus_packet_parse(byte* data, int len, byte* out_toc, byte*[] frames, short[] size, int* payload_offset) Parameters Type Name Description byte* data Opus packet to be parsed. int len size of data. byte* out_toc TOC pointer. byte*[] frames encapsulated frames. short[] size sizes of the encapsulated frames. int* payload_offset returns the position of the payload within the packet (in bytes). Returns Type Description int number of frames. opus_packet_unpad(byte*, int) Remove all padding from a given Opus packet and rewrite the TOC sequence to minimize space usage. Declaration public static extern int opus_packet_unpad(byte* data, int len) Parameters Type Name Description byte* data The buffer containing the packet to strip. int len The size of the packet. This must be at least 1. Returns Type Description int The new size of the output packet on success, or an OpusErrorCodes on failure. opus_pcm_soft_clip(float*, int, int, float*) Applies soft-clipping to bring a float signal within the [-1,1] range. Declaration public static extern void opus_pcm_soft_clip(float* pcm, int frame_size, int channels, float* softclip_mem) Parameters Type Name Description float* pcm Input PCM and modified PCM. int frame_size Number of samples per channel to process. int channels Number of channels. float* softclip_mem State memory for the soft clipping process (one float per channel, initialized to zero). opus_repacketizer_cat(OpusRepacketizerSafeHandle, byte*, int) Add a packet to the current OpusRepacketizerSafeHandle state. Declaration public static extern int opus_repacketizer_cat(OpusRepacketizerSafeHandle rp, byte* data, int len) Parameters Type Name Description OpusRepacketizerSafeHandle rp The repacketizer state to which to add the packet. byte* data The packet data. The application must ensure this pointer remains valid until the next call to opus_repacketizer_init(OpusRepacketizerSafeHandle) or opus_repacketizer_destroy(IntPtr). int len The number of bytes in the packet data. Returns Type Description int OpusErrorCodes opus_repacketizer_create() Allocates memory and initializes the new OpusRepacketizerSafeHandle with opus_repacketizer_init(OpusRepacketizerSafeHandle). Declaration public static extern OpusRepacketizerSafeHandle opus_repacketizer_create() Returns Type Description OpusRepacketizerSafeHandle OpusRepacketizerSafeHandle opus_repacketizer_destroy(IntPtr) Frees an OpusRepacketizerSafeHandle allocated by opus_repacketizer_create(). Declaration public static extern void opus_repacketizer_destroy(IntPtr rp) Parameters Type Name Description IntPtr rp State to be freed. opus_repacketizer_get_nb_frames(OpusRepacketizerSafeHandle) Return the total number of frames contained in packet data submitted to the OpusRepacketizerSafeHandle state so far via opus_repacketizer_cat(OpusRepacketizerSafeHandle, byte*, int) since the last call to opus_repacketizer_init(OpusRepacketizerSafeHandle) or opus_repacketizer_create(). Declaration public static extern int opus_repacketizer_get_nb_frames(OpusRepacketizerSafeHandle rp) Parameters Type Name Description OpusRepacketizerSafeHandle rp The repacketizer state containing the frames. Returns Type Description int The total number of frames contained in the packet data submitted to the repacketizer state. opus_repacketizer_get_size() Gets the size of an OpusRepacketizerSafeHandle structure. Declaration public static extern int opus_repacketizer_get_size() Returns Type Description int The size in bytes. opus_repacketizer_init(OpusRepacketizerSafeHandle) (Re)initializes a previously allocated OpusRepacketizerSafeHandle state. Declaration public static extern OpusRepacketizerSafeHandle opus_repacketizer_init(OpusRepacketizerSafeHandle rp) Parameters Type Name Description OpusRepacketizerSafeHandle rp The OpusRepacketizerSafeHandle state to (re)initialize. Returns Type Description OpusRepacketizerSafeHandle OpusRepacketizerSafeHandle opus_repacketizer_out(OpusRepacketizerSafeHandle, byte*, int) Construct a new packet from data previously submitted to the OpusRepacketizerSafeHandle state via opus_repacketizer_cat(OpusRepacketizerSafeHandle, byte*, int). Declaration public static extern int opus_repacketizer_out(OpusRepacketizerSafeHandle rp, byte* data, int maxlen) Parameters Type Name Description OpusRepacketizerSafeHandle rp The repacketizer state from which to construct the new packet. byte* data The buffer in which to store the output packet. int maxlen The maximum number of bytes to store in the output buffer. In order to guarantee success, this should be at least 1277opus_repacketizer_get_nb_frames(rp). However, 1opus_repacketizer_get_nb_frames(rp) plus the size of all packet data submitted to the repacketizer since the last call to opus_repacketizer_init() or opus_repacketizer_create() is also sufficient, and possibly much smaller. Returns Type Description int The total size of the output packet on success, or an OpusErrorCodes on failure. opus_repacketizer_out_range(OpusRepacketizerSafeHandle, int, int, byte*, int) Construct a new packet from data previously submitted to the OpusRepacketizerSafeHandle state via opus_repacketizer_cat(OpusRepacketizerSafeHandle, byte*, int). Declaration public static extern int opus_repacketizer_out_range(OpusRepacketizerSafeHandle rp, int begin, int end, byte* data, int maxlen) Parameters Type Name Description OpusRepacketizerSafeHandle rp The repacketizer state from which to construct the new packet. int begin The index of the first frame in the current repacketizer state to include in the output. int end One past the index of the last frame in the current repacketizer state to include in the output. byte* data The buffer in which to store the output packet. int maxlen The maximum number of bytes to store in the output buffer. In order to guarantee success, this should be at least 1276 for a single frame, or for multiple frames, 1277*(end-begin). However, 1*(end-begin) plus the size of all packet data submitted to the repacketizer since the last call to opus_repacketizer_init(OpusRepacketizerSafeHandle) or opus_repacketizer_create() is also sufficient, and possibly much smaller. Returns Type Description int The total size of the output packet on success, or an OpusErrorCodes on failure. opus_strerror(int) Converts an opus error code into a human readable string. Declaration public static extern byte* opus_strerror(int error) Parameters Type Name Description int error Error number. Returns Type Description byte* Error string."
  },
  "api/OpusSharp.Core.OpusDecoder.html": {
    "href": "api/OpusSharp.Core.OpusDecoder.html",
    "title": "Class OpusDecoder | OpusSharp",
    "keywords": "Class OpusDecoder An opus decoder. Inheritance object OpusDecoder Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: OpusSharp.Core Assembly: OpusSharp.dll Syntax public class OpusDecoder : IDisposable Constructors | Edit this page View Source OpusDecoder(int, int) Creates a new opus decoder. Declaration public OpusDecoder(int sample_rate, int channels) Parameters Type Name Description int sample_rate The sample rate, this must be one of 8000, 12000, 16000, 24000, or 48000. int channels Number of channels, this must be 1 or 2. Exceptions Type Condition OpusException Fields | Edit this page View Source _handler Direct safe handle for the OpusDecoder. IT IS NOT RECOMMENDED TO CLOSE THE HANDLE DIRECTLY! Instead use Dispose(bool) to dispose the handle and object safely. Declaration protected OpusDecoderSafeHandle _handler Field Value Type Description OpusDecoderSafeHandle Methods | Edit this page View Source CheckError(int) Checks if there is an opus error and throws if the error is a negative value. Declaration protected void CheckError(int error) Parameters Type Name Description int error The error code to input. Exceptions Type Condition OpusException | Edit this page View Source Ctl(GenericCTL) Performs a ctl request. Declaration public int Ctl(GenericCTL request) Parameters Type Name Description GenericCTL request The request you want to specify. Returns Type Description int The result code of the request. See OpusErrorCodes. Exceptions Type Condition OpusException ObjectDisposedException | Edit this page View Source Ctl<T>(DecoderCTL, ref T) Performs a ctl request. Declaration public int Ctl<T>(DecoderCTL request, ref T value) where T : unmanaged Parameters Type Name Description DecoderCTL request The request you want to specify. T value The input/output value. Returns Type Description int The result code of the request. See OpusErrorCodes. Type Parameters Name Description T The type you want to input/output. Exceptions Type Condition OpusException ObjectDisposedException | Edit this page View Source Ctl<T>(GenericCTL, ref T) Performs a ctl request. Declaration public int Ctl<T>(GenericCTL request, ref T value) where T : unmanaged Parameters Type Name Description GenericCTL request The request you want to specify. T value The input/output value. Returns Type Description int The result code of the request. See OpusErrorCodes. Type Parameters Name Description T The type you want to input/output. Exceptions Type Condition OpusException ObjectDisposedException | Edit this page View Source Decode(byte[]?, int, byte[], int, bool) Decodes an opus encoded frame. Declaration public int Decode(byte[]? input, int length, byte[] output, int frame_size, bool decode_fec) Parameters Type Name Description byte[] input Input payload. Use null to indicate packet loss int length Number of bytes in payload. byte[] output Output signal (interleaved if 2 channels). length is frame_size*channels int frame_size Number of samples per channel of available space in pcm. If this is less than the maximum packet duration (120ms; 5760 for 48kHz), this function will not be capable of decoding some packets. In the case of PLC (data==NULL) or FEC (decode_fec=true), then frame_size needs to be exactly the duration of audio that is missing, otherwise the decoder will not be in the optimal state to decode the next incoming packet. For the PLC and FEC cases, frame_size must be a multiple of 2.5 ms. bool decode_fec Request that any in-band forward error correction data be decoded. If no such data is available, the frame is decoded as if it were lost. Returns Type Description int Number of decoded samples or OpusErrorCodes. | Edit this page View Source Decode(byte[]?, int, short[], int, bool) Decodes an opus encoded frame. Declaration public int Decode(byte[]? input, int length, short[] output, int frame_size, bool decode_fec) Parameters Type Name Description byte[] input Input payload. Use null to indicate packet loss int length Number of bytes in payload. short[] output Output signal (interleaved if 2 channels). length is frame_sizechannelssizeof(short) int frame_size Number of samples per channel of available space in pcm. If this is less than the maximum packet duration (120ms; 5760 for 48kHz), this function will not be capable of decoding some packets. In the case of PLC (data==NULL) or FEC (decode_fec=true), then frame_size needs to be exactly the duration of audio that is missing, otherwise the decoder will not be in the optimal state to decode the next incoming packet. For the PLC and FEC cases, frame_size must be a multiple of 2.5 ms. bool decode_fec Request that any in-band forward error correction data be decoded. If no such data is available, the frame is decoded as if it were lost. Returns Type Description int Number of decoded samples or OpusErrorCodes. | Edit this page View Source Decode(byte[]?, int, float[], int, bool) Decodes an opus encoded frame. Declaration public int Decode(byte[]? input, int length, float[] output, int frame_size, bool decode_fec) Parameters Type Name Description byte[] input Input payload. Use null to indicate packet loss int length Number of bytes in payload. float[] output Output signal (interleaved if 2 channels). length is frame_sizechannelssizeof(float) int frame_size Number of samples per channel of available space in pcm. If this is less than the maximum packet duration (120ms; 5760 for 48kHz), this function will not be capable of decoding some packets. In the case of PLC (data==NULL) or FEC (decode_fec=true), then frame_size needs to be exactly the duration of audio that is missing, otherwise the decoder will not be in the optimal state to decode the next incoming packet. For the PLC and FEC cases, frame_size must be a multiple of 2.5 ms. bool decode_fec Request that any in-band forward error correction data be decoded. If no such data is available, the frame is decoded as if it were lost. Returns Type Description int Number of decoded samples or OpusErrorCodes. | Edit this page View Source Decode(Span<byte>, int, Span<byte>, int, bool) Decodes an opus encoded frame. Declaration public int Decode(Span<byte> input, int length, Span<byte> output, int frame_size, bool decode_fec) Parameters Type Name Description Span<byte> input Input payload. Use null to indicate packet loss int length Number of bytes in payload. Span<byte> output Output signal (interleaved if 2 channels). length is frame_sizechannelssizeof(short). int frame_size Number of samples per channel of available space in pcm. If this is less than the maximum packet duration (120ms; 5760 for 48kHz), this function will not be capable of decoding some packets. In the case of PLC (data==NULL) or FEC (decode_fec=true), then frame_size needs to be exactly the duration of audio that is missing, otherwise the decoder will not be in the optimal state to decode the next incoming packet. For the PLC and FEC cases, frame_size must be a multiple of 2.5 ms. bool decode_fec Request that any in-band forward error correction data be decoded. If no such data is available, the frame is decoded as if it were lost. Returns Type Description int Number of decoded samples or OpusErrorCodes. | Edit this page View Source Decode(Span<byte>, int, Span<short>, int, bool) Decodes an opus encoded frame. Declaration public int Decode(Span<byte> input, int length, Span<short> output, int frame_size, bool decode_fec) Parameters Type Name Description Span<byte> input Input payload. Use null to indicate packet loss int length Number of bytes in payload. Span<short> output Output signal (interleaved if 2 channels). length is frame_size*channels. int frame_size Number of samples per channel of available space in pcm. If this is less than the maximum packet duration (120ms; 5760 for 48kHz), this function will not be capable of decoding some packets. In the case of PLC (data==NULL) or FEC (decode_fec=true), then frame_size needs to be exactly the duration of audio that is missing, otherwise the decoder will not be in the optimal state to decode the next incoming packet. For the PLC and FEC cases, frame_size must be a multiple of 2.5 ms. bool decode_fec Request that any in-band forward error correction data be decoded. If no such data is available, the frame is decoded as if it were lost. Returns Type Description int Number of decoded samples or OpusErrorCodes. | Edit this page View Source Decode(Span<byte>, int, Span<float>, int, bool) Decodes an opus encoded frame. Declaration public int Decode(Span<byte> input, int length, Span<float> output, int frame_size, bool decode_fec) Parameters Type Name Description Span<byte> input Input payload. Use null to indicate packet loss int length Number of bytes in payload. Span<float> output Output signal (interleaved if 2 channels). length is (frame_size*channels)/2. Note: I don't know if this is correct. int frame_size Number of samples per channel of available space in pcm. If this is less than the maximum packet duration (120ms; 5760 for 48kHz), this function will not be capable of decoding some packets. In the case of PLC (data==NULL) or FEC (decode_fec=true), then frame_size needs to be exactly the duration of audio that is missing, otherwise the decoder will not be in the optimal state to decode the next incoming packet. For the PLC and FEC cases, frame_size must be a multiple of 2.5 ms. bool decode_fec Request that any in-band forward error correction data be decoded. If no such data is available, the frame is decoded as if it were lost. Returns Type Description int Number of decoded samples or OpusErrorCodes. | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Edit this page View Source Dispose(bool) Dispose logic. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing Set to true if fully disposing. | Edit this page View Source ThrowIfDisposed() Throws an exception if this object is disposed or the handler is closed. Declaration protected virtual void ThrowIfDisposed() Exceptions Type Condition ObjectDisposedException Implements IDisposable"
  },
  "api/OpusSharp.Core.OpusEncoder.html": {
    "href": "api/OpusSharp.Core.OpusEncoder.html",
    "title": "Class OpusEncoder | OpusSharp",
    "keywords": "Class OpusEncoder An opus encoder. Inheritance object OpusEncoder Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: OpusSharp.Core Assembly: OpusSharp.dll Syntax public class OpusEncoder : IDisposable Constructors | Edit this page View Source OpusEncoder(int, int, OpusPredefinedValues) Creates a new opus encoder. Declaration public OpusEncoder(int sample_rate, int channels, OpusPredefinedValues application) Parameters Type Name Description int sample_rate The sample rate, this must be one of 8000, 12000, 16000, 24000, or 48000. int channels Number of channels, this must be 1 or 2. OpusPredefinedValues application Coding mode (one of OPUS_APPLICATION_VOIP, OPUS_APPLICATION_AUDIO or OPUS_APPLICATION_RESTRICTED_LOWDELAY Exceptions Type Condition OpusException Fields | Edit this page View Source _handler Direct safe handle for the OpusEncoder. IT IS NOT RECOMMENDED TO CLOSE THE HANDLE DIRECTLY! Instead use Dispose(bool) to dispose the handle and object safely. Declaration protected OpusEncoderSafeHandle _handler Field Value Type Description OpusEncoderSafeHandle Methods | Edit this page View Source CheckError(int) Checks if there is an opus error and throws if the error is a negative value. Declaration protected void CheckError(int error) Parameters Type Name Description int error The error code to input. Exceptions Type Condition OpusException | Edit this page View Source Ctl(GenericCTL) Performs a ctl request. Declaration public int Ctl(GenericCTL request) Parameters Type Name Description GenericCTL request The request you want to specify. Returns Type Description int The result code of the request. See OpusErrorCodes. Exceptions Type Condition OpusException ObjectDisposedException | Edit this page View Source Ctl<T>(EncoderCTL, ref T) Performs a ctl request. Declaration public int Ctl<T>(EncoderCTL request, ref T value) where T : unmanaged Parameters Type Name Description EncoderCTL request The request you want to specify. T value The input/output value. Returns Type Description int The result code of the request. See OpusErrorCodes. Type Parameters Name Description T The type you want to input/output. Exceptions Type Condition OpusException ObjectDisposedException | Edit this page View Source Ctl<T>(GenericCTL, ref T) Performs a ctl request. Declaration public int Ctl<T>(GenericCTL request, ref T value) where T : unmanaged Parameters Type Name Description GenericCTL request The request you want to specify. T value The input/output value. Returns Type Description int The result code of the request. See OpusErrorCodes. Type Parameters Name Description T The type you want to input/output. Exceptions Type Condition OpusException ObjectDisposedException | Edit this page View Source Ctl<T, T2>(EncoderCTL, ref T, ref T2) Performs a ctl request. Declaration public int Ctl<T, T2>(EncoderCTL request, ref T value, ref T2 value2) where T : unmanaged where T2 : unmanaged Parameters Type Name Description EncoderCTL request The request you want to specify. T value The input/output value. T2 value2 The second input/output value. Returns Type Description int The result code of the request. See OpusErrorCodes. Type Parameters Name Description T The type you want to input/output. T2 The second type you want to input/output. Exceptions Type Condition OpusException ObjectDisposedException | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Edit this page View Source Dispose(bool) Dispose logic. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing Set to true if fully disposing. | Edit this page View Source Encode(byte[], int, byte[], int) Encodes a pcm frame. Declaration public int Encode(byte[] input, int frame_size, byte[] output, int max_data_bytes) Parameters Type Name Description byte[] input Input signal (interleaved if 2 channels). length is frame_size*channels. int frame_size The frame size of the pcm data. This must be an Opus frame size for the encoder's sampling rate. For example, at 48 kHz the permitted values are 120, 240, 480, 960, 1920, and 2880. Passing in a duration of less than 10 ms (480 samples at 48 kHz) will prevent the encoder from using the LPC or hybrid modes. byte[] output Output payload. This must contain storage for at least max_data_bytes. int max_data_bytes Size of the allocated memory for the output payload. This may be used to impose an upper limit on the instant bitrate, but should not be used as the only bitrate control. Use OPUS_SET_BITRATE to control the bitrate. Returns Type Description int The length of the encoded packet (in bytes). Exceptions Type Condition OpusException ObjectDisposedException | Edit this page View Source Encode(short[], int, byte[], int) Encodes a pcm frame. Declaration public int Encode(short[] input, int frame_size, byte[] output, int max_data_bytes) Parameters Type Name Description short[] input Input signal (interleaved if 2 channels). length is frame_sizechannelssizeof(short). int frame_size The frame size of the pcm data. This must be an Opus frame size for the encoder's sampling rate. For example, at 48 kHz the permitted values are 120, 240, 480, 960, 1920, and 2880. Passing in a duration of less than 10 ms (480 samples at 48 kHz) will prevent the encoder from using the LPC or hybrid modes. byte[] output Output payload. This must contain storage for at least max_data_bytes. int max_data_bytes Size of the allocated memory for the output payload. This may be used to impose an upper limit on the instant bitrate, but should not be used as the only bitrate control. Use OPUS_SET_BITRATE to control the bitrate. Returns Type Description int The length of the encoded packet (in bytes). Exceptions Type Condition OpusException ObjectDisposedException | Edit this page View Source Encode(float[], int, byte[], int) Encodes a floating point pcm frame. Declaration public int Encode(float[] input, int frame_size, byte[] output, int max_data_bytes) Parameters Type Name Description float[] input Input signal (interleaved if 2 channels). length is frame_sizechannelssizeof(float). int frame_size The frame size of the pcm data. This must be an Opus frame size for the encoder's sampling rate. For example, at 48 kHz the permitted values are 120, 240, 480, 960, 1920, and 2880. Passing in a duration of less than 10 ms (480 samples at 48 kHz) will prevent the encoder from using the LPC or hybrid modes. byte[] output Output payload. This must contain storage for at least max_data_bytes. int max_data_bytes Size of the allocated memory for the output payload. This may be used to impose an upper limit on the instant bitrate, but should not be used as the only bitrate control. Use OPUS_SET_BITRATE to control the bitrate. Returns Type Description int The length of the encoded packet (in bytes). Exceptions Type Condition OpusException ObjectDisposedException | Edit this page View Source Encode(Span<byte>, int, Span<byte>, int) Encodes a pcm frame. Declaration public int Encode(Span<byte> input, int frame_size, Span<byte> output, int max_data_bytes) Parameters Type Name Description Span<byte> input Input signal (interleaved if 2 channels). length is frame_size*channels. int frame_size The frame size of the pcm data. This must be an Opus frame size for the encoder's sampling rate. For example, at 48 kHz the permitted values are 120, 240, 480, 960, 1920, and 2880. Passing in a duration of less than 10 ms (480 samples at 48 kHz) will prevent the encoder from using the LPC or hybrid modes. Span<byte> output Output payload. This must contain storage for at least max_data_bytes. int max_data_bytes Size of the allocated memory for the output payload. This may be used to impose an upper limit on the instant bitrate, but should not be used as the only bitrate control. Use OPUS_SET_BITRATE to control the bitrate. Returns Type Description int The length of the encoded packet (in bytes). Exceptions Type Condition OpusException ObjectDisposedException | Edit this page View Source Encode(Span<short>, int, Span<byte>, int) Encodes a pcm frame. Declaration public int Encode(Span<short> input, int frame_size, Span<byte> output, int max_data_bytes) Parameters Type Name Description Span<short> input Input signal (interleaved if 2 channels). length is frame_sizechannelssizeof(short). int frame_size The frame size of the pcm data. This must be an Opus frame size for the encoder's sampling rate. For example, at 48 kHz the permitted values are 120, 240, 480, 960, 1920, and 2880. Passing in a duration of less than 10 ms (480 samples at 48 kHz) will prevent the encoder from using the LPC or hybrid modes. Span<byte> output Output payload. This must contain storage for at least max_data_bytes. int max_data_bytes Size of the allocated memory for the output payload. This may be used to impose an upper limit on the instant bitrate, but should not be used as the only bitrate control. Use OPUS_SET_BITRATE to control the bitrate. Returns Type Description int The length of the encoded packet (in bytes). Exceptions Type Condition OpusException ObjectDisposedException | Edit this page View Source Encode(Span<float>, int, Span<byte>, int) Encodes a floating point pcm frame. Declaration public int Encode(Span<float> input, int frame_size, Span<byte> output, int max_data_bytes) Parameters Type Name Description Span<float> input Input signal (interleaved if 2 channels). length is frame_sizechannelssizeof(float). int frame_size The frame size of the pcm data. This must be an Opus frame size for the encoder's sampling rate. For example, at 48 kHz the permitted values are 120, 240, 480, 960, 1920, and 2880. Passing in a duration of less than 10 ms (480 samples at 48 kHz) will prevent the encoder from using the LPC or hybrid modes. Span<byte> output Output payload. This must contain storage for at least max_data_bytes. int max_data_bytes Size of the allocated memory for the output payload. This may be used to impose an upper limit on the instant bitrate, but should not be used as the only bitrate control. Use OPUS_SET_BITRATE to control the bitrate. Returns Type Description int The length of the encoded packet (in bytes). Exceptions Type Condition OpusException ObjectDisposedException | Edit this page View Source ThrowIfDisposed() Throws an exception if this object is disposed or the handler is closed. Declaration protected virtual void ThrowIfDisposed() Exceptions Type Condition ObjectDisposedException Implements IDisposable"
  },
  "api/OpusSharp.Core.OpusErrorCodes.html": {
    "href": "api/OpusSharp.Core.OpusErrorCodes.html",
    "title": "Enum OpusErrorCodes | OpusSharp",
    "keywords": "Enum OpusErrorCodes Error codes for opus. Namespace: OpusSharp.Core Assembly: OpusSharp.dll Syntax public enum OpusErrorCodes Fields Name Description OPUS_ALLOC_FAIL Memory allocation has failed. OPUS_BAD_ARG One or more invalid/out of range arguments. OPUS_BUFFER_TOO_SMALL Not enough bytes allocated in the buffer. OPUS_INTERNAL_ERROR An internal error was detected. OPUS_INVALID_PACKET The compressed data passed is corrupted. OPUS_INVALID_STATE An encoder or decoder structure is invalid or already freed. OPUS_OK No error. OPUS_UNIMPLEMENTED Invalid/unsupported request number."
  },
  "api/OpusSharp.Core.OpusException.html": {
    "href": "api/OpusSharp.Core.OpusException.html",
    "title": "Class OpusException | OpusSharp",
    "keywords": "Class OpusException An opus exception. Inheritance object Exception OpusException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: OpusSharp.Core Assembly: OpusSharp.dll Syntax public class OpusException : Exception, ISerializable Constructors | Edit this page View Source OpusException() Constructs an opus exception. Declaration public OpusException() | Edit this page View Source OpusException(string) Constructs an opus exception. Declaration public OpusException(string message) Parameters Type Name Description string message The message of the exception. | Edit this page View Source OpusException(string, Exception) Constructs an opus exception. Declaration public OpusException(string message, Exception innerException) Parameters Type Name Description string message The message of the exception. Exception innerException The root exception. Implements ISerializable"
  },
  "api/OpusSharp.Core.OpusInfo.html": {
    "href": "api/OpusSharp.Core.OpusInfo.html",
    "title": "Class OpusInfo | OpusSharp",
    "keywords": "Class OpusInfo Provides information about the opus DLL. Inheritance object OpusInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: OpusSharp.Core Assembly: OpusSharp.dll Syntax public class OpusInfo Methods | Edit this page View Source StringError(int) Converts an opus error code into a human readable string. Declaration public static string StringError(int error) Parameters Type Name Description int error Error number. Returns Type Description string Error string. | Edit this page View Source Version() Gets the libopus version string. Declaration public static string Version() Returns Type Description string Version string."
  },
  "api/OpusSharp.Core.OpusPredefinedValues.html": {
    "href": "api/OpusSharp.Core.OpusPredefinedValues.html",
    "title": "Enum OpusPredefinedValues | OpusSharp",
    "keywords": "Enum OpusPredefinedValues Pre-defined values for CTL interface. Namespace: OpusSharp.Core Assembly: OpusSharp.dll Syntax public enum OpusPredefinedValues Fields Name Description OPUS_APPLICATION_AUDIO Best for broadcast/high-fidelity application where the decoded audio should be as close as possible to the input. OPUS_APPLICATION_RESTRICTED_LOWDELAY Only use when lowest-achievable latency is what matters most. Voice-optimized modes cannot be used. OPUS_APPLICATION_VOIP Best for most VoIP/Video Conference applications where listening quality and intelligibility matter most. OPUS_AUTO Auto/default setting. OPUS_BANDWIDTH_FULLBAND 20 kHz bandpass. OPUS_BANDWIDTH_MEDIUMBAND 6 kHz bandpass. OPUS_BANDWIDTH_NARROWBAND 4 kHz bandpass. OPUS_BANDWIDTH_SUPERWIDEBAND 12 kHz bandpass. OPUS_BANDWIDTH_WIDEBAND 8 kHz bandpass. OPUS_BITRATE_MAX Maximum bitrate. OPUS_FRAMESIZE_100_MS Use 100 ms frames. OPUS_FRAMESIZE_10_MS Use 10 ms frames. OPUS_FRAMESIZE_120_MS Use 120 ms frames. OPUS_FRAMESIZE_20_MS Use 20 ms frames. OPUS_FRAMESIZE_2_5_MS Use 2.5 ms frames. OPUS_FRAMESIZE_40_MS Use 40 ms frames. OPUS_FRAMESIZE_5_MS Use 5 ms frames. OPUS_FRAMESIZE_60_MS Use 60 ms frames. OPUS_FRAMESIZE_80_MS Use 80 ms frames. OPUS_FRAMESIZE_ARG Select frame size from the argument (default). OPUS_SIGNAL_MUSIC Signal being encoded is music. OPUS_SIGNAL_VOICE Signal being encoded is voice."
  },
  "api/OpusSharp.Core.SafeHandlers.OpusDREDDecoderSafeHandle.html": {
    "href": "api/OpusSharp.Core.SafeHandlers.OpusDREDDecoderSafeHandle.html",
    "title": "Class OpusDREDDecoderSafeHandle | OpusSharp",
    "keywords": "Class OpusDREDDecoderSafeHandle Managed wrapper over the OpusDREDDecoder state. Inheritance object CriticalFinalizerObject SafeHandle OpusDREDDecoderSafeHandle Implements IDisposable Inherited Members SafeHandle.handle SafeHandle.Close() SafeHandle.DangerousAddRef(ref bool) SafeHandle.DangerousGetHandle() SafeHandle.DangerousRelease() SafeHandle.Dispose() SafeHandle.Dispose(bool) SafeHandle.SetHandle(IntPtr) SafeHandle.SetHandleAsInvalid() SafeHandle.IsClosed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: OpusSharp.Core.SafeHandlers Assembly: OpusSharp.dll Syntax public class OpusDREDDecoderSafeHandle : SafeHandle, IDisposable Constructors | Edit this page View Source OpusDREDDecoderSafeHandle() Creates a new OpusDecoderSafeHandle. Declaration public OpusDREDDecoderSafeHandle() Properties | Edit this page View Source IsInvalid When overridden in a derived class, gets a value indicating whether the handle value is invalid. Declaration public override bool IsInvalid { get; } Property Value Type Description bool true if the handle value is invalid; otherwise, false. Overrides SafeHandle.IsInvalid Methods | Edit this page View Source ReleaseHandle() When overridden in a derived class, executes the code required to free the handle. Declaration protected override bool ReleaseHandle() Returns Type Description bool true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a releaseHandleFailed Managed Debugging Assistant. Overrides SafeHandle.ReleaseHandle() Implements IDisposable"
  },
  "api/OpusSharp.Core.SafeHandlers.OpusDREDSafeHandle.html": {
    "href": "api/OpusSharp.Core.SafeHandlers.OpusDREDSafeHandle.html",
    "title": "Class OpusDREDSafeHandle | OpusSharp",
    "keywords": "Class OpusDREDSafeHandle Managed wrapper over the OpusDRED state. Inheritance object CriticalFinalizerObject SafeHandle OpusDREDSafeHandle Implements IDisposable Inherited Members SafeHandle.handle SafeHandle.Close() SafeHandle.DangerousAddRef(ref bool) SafeHandle.DangerousGetHandle() SafeHandle.DangerousRelease() SafeHandle.Dispose() SafeHandle.Dispose(bool) SafeHandle.SetHandle(IntPtr) SafeHandle.SetHandleAsInvalid() SafeHandle.IsClosed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: OpusSharp.Core.SafeHandlers Assembly: OpusSharp.dll Syntax public class OpusDREDSafeHandle : SafeHandle, IDisposable Constructors | Edit this page View Source OpusDREDSafeHandle() Creates a new OpusDREDDecoderSafeHandle. Declaration public OpusDREDSafeHandle() Properties | Edit this page View Source IsInvalid When overridden in a derived class, gets a value indicating whether the handle value is invalid. Declaration public override bool IsInvalid { get; } Property Value Type Description bool true if the handle value is invalid; otherwise, false. Overrides SafeHandle.IsInvalid Methods | Edit this page View Source ReleaseHandle() When overridden in a derived class, executes the code required to free the handle. Declaration protected override bool ReleaseHandle() Returns Type Description bool true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a releaseHandleFailed Managed Debugging Assistant. Overrides SafeHandle.ReleaseHandle() Implements IDisposable"
  },
  "api/OpusSharp.Core.SafeHandlers.OpusDecoderSafeHandle.html": {
    "href": "api/OpusSharp.Core.SafeHandlers.OpusDecoderSafeHandle.html",
    "title": "Class OpusDecoderSafeHandle | OpusSharp",
    "keywords": "Class OpusDecoderSafeHandle Managed wrapper over the OpusDecoder state. Inheritance object CriticalFinalizerObject SafeHandle OpusDecoderSafeHandle Implements IDisposable Inherited Members SafeHandle.handle SafeHandle.Close() SafeHandle.DangerousAddRef(ref bool) SafeHandle.DangerousGetHandle() SafeHandle.DangerousRelease() SafeHandle.Dispose() SafeHandle.Dispose(bool) SafeHandle.SetHandle(IntPtr) SafeHandle.SetHandleAsInvalid() SafeHandle.IsClosed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: OpusSharp.Core.SafeHandlers Assembly: OpusSharp.dll Syntax public class OpusDecoderSafeHandle : SafeHandle, IDisposable Constructors | Edit this page View Source OpusDecoderSafeHandle() Creates a new OpusDecoderSafeHandle. Declaration public OpusDecoderSafeHandle() Properties | Edit this page View Source IsInvalid When overridden in a derived class, gets a value indicating whether the handle value is invalid. Declaration public override bool IsInvalid { get; } Property Value Type Description bool true if the handle value is invalid; otherwise, false. Overrides SafeHandle.IsInvalid Methods | Edit this page View Source ReleaseHandle() When overridden in a derived class, executes the code required to free the handle. Declaration protected override bool ReleaseHandle() Returns Type Description bool true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a releaseHandleFailed Managed Debugging Assistant. Overrides SafeHandle.ReleaseHandle() Implements IDisposable"
  },
  "api/OpusSharp.Core.SafeHandlers.OpusEncoderSafeHandle.html": {
    "href": "api/OpusSharp.Core.SafeHandlers.OpusEncoderSafeHandle.html",
    "title": "Class OpusEncoderSafeHandle | OpusSharp",
    "keywords": "Class OpusEncoderSafeHandle Managed wrapper over the OpusEncoder state. Inheritance object CriticalFinalizerObject SafeHandle OpusEncoderSafeHandle Implements IDisposable Inherited Members SafeHandle.handle SafeHandle.Close() SafeHandle.DangerousAddRef(ref bool) SafeHandle.DangerousGetHandle() SafeHandle.DangerousRelease() SafeHandle.Dispose() SafeHandle.Dispose(bool) SafeHandle.SetHandle(IntPtr) SafeHandle.SetHandleAsInvalid() SafeHandle.IsClosed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: OpusSharp.Core.SafeHandlers Assembly: OpusSharp.dll Syntax public class OpusEncoderSafeHandle : SafeHandle, IDisposable Constructors | Edit this page View Source OpusEncoderSafeHandle() Creates a new OpusEncoderSafeHandle. Declaration public OpusEncoderSafeHandle() Properties | Edit this page View Source IsInvalid When overridden in a derived class, gets a value indicating whether the handle value is invalid. Declaration public override bool IsInvalid { get; } Property Value Type Description bool true if the handle value is invalid; otherwise, false. Overrides SafeHandle.IsInvalid Methods | Edit this page View Source ReleaseHandle() When overridden in a derived class, executes the code required to free the handle. Declaration protected override bool ReleaseHandle() Returns Type Description bool true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a releaseHandleFailed Managed Debugging Assistant. Overrides SafeHandle.ReleaseHandle() Implements IDisposable"
  },
  "api/OpusSharp.Core.SafeHandlers.OpusMSDecoderSafeHandle.html": {
    "href": "api/OpusSharp.Core.SafeHandlers.OpusMSDecoderSafeHandle.html",
    "title": "Class OpusMSDecoderSafeHandle | OpusSharp",
    "keywords": "Class OpusMSDecoderSafeHandle Managed wrapper over the OpusMultistreamDecoder state. Inheritance object CriticalFinalizerObject SafeHandle OpusMSDecoderSafeHandle Implements IDisposable Inherited Members SafeHandle.handle SafeHandle.Close() SafeHandle.DangerousAddRef(ref bool) SafeHandle.DangerousGetHandle() SafeHandle.DangerousRelease() SafeHandle.Dispose() SafeHandle.Dispose(bool) SafeHandle.SetHandle(IntPtr) SafeHandle.SetHandleAsInvalid() SafeHandle.IsClosed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: OpusSharp.Core.SafeHandlers Assembly: OpusSharp.dll Syntax public class OpusMSDecoderSafeHandle : SafeHandle, IDisposable Constructors | Edit this page View Source OpusMSDecoderSafeHandle() Creates a new OpusMSDecoderSafeHandle. Declaration public OpusMSDecoderSafeHandle() Properties | Edit this page View Source IsInvalid When overridden in a derived class, gets a value indicating whether the handle value is invalid. Declaration public override bool IsInvalid { get; } Property Value Type Description bool true if the handle value is invalid; otherwise, false. Overrides SafeHandle.IsInvalid Methods | Edit this page View Source ReleaseHandle() When overridden in a derived class, executes the code required to free the handle. Declaration protected override bool ReleaseHandle() Returns Type Description bool true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a releaseHandleFailed Managed Debugging Assistant. Overrides SafeHandle.ReleaseHandle() Implements IDisposable"
  },
  "api/OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle.html": {
    "href": "api/OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle.html",
    "title": "Class OpusMSEncoderSafeHandle | OpusSharp",
    "keywords": "Class OpusMSEncoderSafeHandle Managed wrapper over the OpusMultistreamEncoder state. Inheritance object CriticalFinalizerObject SafeHandle OpusMSEncoderSafeHandle Implements IDisposable Inherited Members SafeHandle.handle SafeHandle.Close() SafeHandle.DangerousAddRef(ref bool) SafeHandle.DangerousGetHandle() SafeHandle.DangerousRelease() SafeHandle.Dispose() SafeHandle.Dispose(bool) SafeHandle.SetHandle(IntPtr) SafeHandle.SetHandleAsInvalid() SafeHandle.IsClosed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: OpusSharp.Core.SafeHandlers Assembly: OpusSharp.dll Syntax public class OpusMSEncoderSafeHandle : SafeHandle, IDisposable Constructors | Edit this page View Source OpusMSEncoderSafeHandle() Creates a new OpusMSEncoderSafeHandle. Declaration public OpusMSEncoderSafeHandle() Properties | Edit this page View Source IsInvalid When overridden in a derived class, gets a value indicating whether the handle value is invalid. Declaration public override bool IsInvalid { get; } Property Value Type Description bool true if the handle value is invalid; otherwise, false. Overrides SafeHandle.IsInvalid Methods | Edit this page View Source ReleaseHandle() When overridden in a derived class, executes the code required to free the handle. Declaration protected override bool ReleaseHandle() Returns Type Description bool true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a releaseHandleFailed Managed Debugging Assistant. Overrides SafeHandle.ReleaseHandle() Implements IDisposable"
  },
  "api/OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle.html": {
    "href": "api/OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle.html",
    "title": "Class OpusRepacketizerSafeHandle | OpusSharp",
    "keywords": "Class OpusRepacketizerSafeHandle Managed wrapper over the OpusRepacketizer state. Inheritance object CriticalFinalizerObject SafeHandle OpusRepacketizerSafeHandle Implements IDisposable Inherited Members SafeHandle.handle SafeHandle.Close() SafeHandle.DangerousAddRef(ref bool) SafeHandle.DangerousGetHandle() SafeHandle.DangerousRelease() SafeHandle.Dispose() SafeHandle.Dispose(bool) SafeHandle.SetHandle(IntPtr) SafeHandle.SetHandleAsInvalid() SafeHandle.IsClosed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: OpusSharp.Core.SafeHandlers Assembly: OpusSharp.dll Syntax public class OpusRepacketizerSafeHandle : SafeHandle, IDisposable Constructors | Edit this page View Source OpusRepacketizerSafeHandle() Creates a new OpusRepacketizerSafeHandle. Declaration public OpusRepacketizerSafeHandle() Properties | Edit this page View Source IsInvalid When overridden in a derived class, gets a value indicating whether the handle value is invalid. Declaration public override bool IsInvalid { get; } Property Value Type Description bool true if the handle value is invalid; otherwise, false. Overrides SafeHandle.IsInvalid Methods | Edit this page View Source ReleaseHandle() When overridden in a derived class, executes the code required to free the handle. Declaration protected override bool ReleaseHandle() Returns Type Description bool true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a releaseHandleFailed Managed Debugging Assistant. Overrides SafeHandle.ReleaseHandle() Implements IDisposable"
  },
  "api/OpusSharp.Core.SafeHandlers.html": {
    "href": "api/OpusSharp.Core.SafeHandlers.html",
    "title": "Namespace OpusSharp.Core.SafeHandlers | OpusSharp",
    "keywords": "Namespace OpusSharp.Core.SafeHandlers Classes OpusDREDDecoderSafeHandle Managed wrapper over the OpusDREDDecoder state. OpusDREDSafeHandle Managed wrapper over the OpusDRED state. OpusDecoderSafeHandle Managed wrapper over the OpusDecoder state. OpusEncoderSafeHandle Managed wrapper over the OpusEncoder state. OpusMSDecoderSafeHandle Managed wrapper over the OpusMultistreamDecoder state. OpusMSEncoderSafeHandle Managed wrapper over the OpusMultistreamEncoder state. OpusRepacketizerSafeHandle Managed wrapper over the OpusRepacketizer state."
  },
  "api/OpusSharp.Core.html": {
    "href": "api/OpusSharp.Core.html",
    "title": "Namespace OpusSharp.Core | OpusSharp",
    "keywords": "Namespace OpusSharp.Core Classes NativeOpus Native opus handler that directly calls the exported opus functions. OpusDecoder An opus decoder. OpusEncoder An opus encoder. OpusException An opus exception. OpusInfo Provides information about the opus DLL. Enums DecoderCTL These are convenience macros for use with the opus_decoder_ctl interface EncoderCTL These are convenience macros for use with the opus_encoder_ctl interface. GenericCTL These macros are used with the opus_decoder_ctl and opus_encoder_ctl calls to generate a particular request. MultistreamCTL These are convenience macros that are specific to the opus_multistream_encoder_ctl() and opus_multistream_decoder_ctl() interface. OpusErrorCodes Error codes for opus. OpusPredefinedValues Pre-defined values for CTL interface."
  },
  "examples/Home.html": {
    "href": "examples/Home.html",
    "title": "Examples | OpusSharp",
    "keywords": "Examples Below are some general examples for OpusSharp's api. NAudio Example using NAudio.Wave; using OpusSharp.Core; var format = new WaveFormat(48000, 2); var buffer = new BufferedWaveProvider(format) { ReadFully = true }; var encoder = new OpusEncoder(format.SampleRate, format.Channels, OpusPredefinedValues.OPUS_APPLICATION_VOIP); var decoder = new OpusDecoder(format.SampleRate, format.Channels); var recorder = new WaveInEvent() { BufferMilliseconds = 20, WaveFormat = format }; var player = new WaveOutEvent(); recorder.DataAvailable += Recorder_DataAvailable; recorder.StartRecording(); player.Init(buffer); player.Play(); void Recorder_DataAvailable(object? sender, WaveInEventArgs e) { var encoded = new byte[1000]; var encodedBytes = encoder.Encode(e.Buffer, 960, encoded, encoded.Length); Console.WriteLine(encodedBytes); var decoded = new byte[3840]; var decodedSamples = decoder.Decode(encoded, encodedBytes, decoded, 960, false); Console.WriteLine(decodedSamples); buffer.AddSamples(decoded, 0, decoded.Length); } Console.ReadLine();"
  },
  "examples/NativeOpus.html": {
    "href": "examples/NativeOpus.html",
    "title": "NativeOpus Examples | OpusSharp",
    "keywords": "NativeOpus Examples Note While directly calling native functions is typically not recommended, it may be beneficial where you may want to implement your own handlers or add missing wrapper features such as the DREDDecoder. Using a native function using OpusSharp.Core.SafeHandlers; using OpusSharp.Core; unsafe { int error = 0; OpusEncoderSafeHandle safeHandle = NativeOpus.opus_encoder_create(48000, 2, (int)OpusPredefinedValues.OPUS_APPLICATION_AUDIO, &error); if(error < 0) throw new OpusException(((OpusErrorCodes)error).ToString()); //Successfully created an OpusEncoder native object. //Free/Close Object safeHandle.Close(); }"
  },
  "examples/OpusDecoder.html": {
    "href": "examples/OpusDecoder.html",
    "title": "OpusDecoder Examples | OpusSharp",
    "keywords": "OpusDecoder Examples Calling a CTL get using OpusSharp.Core; OpusDecoder decoder = new OpusDecoder(48000, 2); int sampleRate = 0; decoder.Ctl<int>(GenericCTL.OPUS_GET_SAMPLE_RATE, ref sampleRate); //OpusSharp already checks if an error occurred with the CTL request and will throw an OpusException if there is an error, otherwise OpusErrorCodes.OPUS_OK. Console.WriteLine(sampleRate); Calling a CTL set using OpusSharp.Core; OpusDecoder decoder = new OpusDecoder(48000, 2); int gain = 0; decoder.Ctl<int>(DecoderCTL.OPUS_SET_GAIN, ref gain); //OpusSharp already checks if an error occurred with the CTL request and will throw an OpusException if there is an error, otherwise OpusErrorCodes.OPUS_OK."
  },
  "examples/OpusEncoder.html": {
    "href": "examples/OpusEncoder.html",
    "title": "OpusEncoder Examples | OpusSharp",
    "keywords": "OpusEncoder Examples Calling a CTL get using OpusSharp.Core; OpusEncoder encoder = new OpusEncoder(48000, 2, OpusPredefinedValues.OPUS_APPLICATION_VOIP); int sampleRate = 0; encoder.Ctl<int>(GenericCTL.OPUS_GET_SAMPLE_RATE, ref sampleRate); //OpusSharp already checks if an error occurred with the CTL request and will throw an OpusException if there is an error, otherwise OpusErrorCodes.OPUS_OK. Console.WriteLine(sampleRate); Calling a CTL set using OpusSharp.Core; OpusEncoder encoder = new OpusEncoder(48000, 2, OpusPredefinedValues.OPUS_APPLICATION_VOIP); int vbr = 1; //1 == true, 0 == false encoder.Ctl<int>(EncoderCTL.OPUS_SET_VBR, ref vbr); //OpusSharp already checks if an error occurred with the CTL request and will throw an OpusException if there is an error, otherwise OpusErrorCodes.OPUS_OK."
  },
  "examples/OpusInfo.html": {
    "href": "examples/OpusInfo.html",
    "title": "OpusInfo Examples | OpusSharp",
    "keywords": "OpusInfo Examples Get version using OpusSharp.Core; Console.WriteLine(OpusInfo.Version()); Get string error using OpusSharp.Core; Console.WriteLine(OpusInfo.StringError(0)); //opus_ok;"
  },
  "index.html": {
    "href": "index.html",
    "title": "OpusSharp. An unofficial .NET opus wrapper. | OpusSharp",
    "keywords": "OpusSharp. An unofficial .NET opus wrapper. OpusSharp is a wrapper that allows you to directly use opus through C#. How it works OpusSharp is an unofficial .NET wrapper for the Opus audio codec. It contains managed wrappers and safe handlers as well as direct native function access to the opus methods. OpusSharp also includes prebuilt binaries available through the OpusSharp.Natives package. See Quick Start to get started."
  },
  "quick-start/index.html": {
    "href": "quick-start/index.html",
    "title": "Quick Start | OpusSharp",
    "keywords": "Quick Start The easiest way to get started with OpusSharp is to install the OpusSharp.Core package into a .NET application. Step 1: Install OpusSharp.Core You can install OpusSharp.Core via the nuget package manager through your IDE, e.g. VS22, Rider, etc... Or you can install it via the dotnet CLI. dotnet add package OpusSharp.Core --version x.y.z Step 2: Include Opus DLL. By default, OpusSharp.Core DOES NOT contain the opus precompiled DLL's or binaries. This is so you can choose to provide your own DLL's or binary files instead of using OpusSharp's compiled binaries. However if you want to use the precompiled binaries that OpusSharp provides, you can install the OpusSharp.Natives package onto your platform specific projects via the nuget package manager through your IDE, e.g. VS22, Rider, etc... Or through the dotnet CLI. dotnet add package OpusSharp.Natives --version x.y.z Step 3: Create Encoder and Decoder Creating the OpusEncoder and OpusDecoder is as easy as OpusEncoder using OpusSharp.Core; var encoder = new OpusEncoder(48000, 2, OpusPredefinedValues.OPUS_APPLICATION_VOIP); //20ms at 48khz is 960 samples byte[] audio = ...; byte[] encoded = new byte[1000]; int encodedBytes = encoder.Encode(audio, 960, encoded, encoded.Length); Console.WriteLine(encodedBytes); OpusDecoder using OpusSharp.Core; var decoder = new OpusDecoder(48000, 2); //20ms at 48khz is 960 samples byte[] encoded = ...; byte[] decoded = new byte[3840]; //Works out to around 3840 bytes for 20ms audio byte[] decodedSamples = decoder.Decode(encoded, encoded.Length, decoded, 960, false); //encoded.Length should not be used unless the size of the encoded audio is the exact same size. Console.WriteLine(decodedSamples); Next Steps 📖 Read the API for more information about the library 💬 Use the discussions for help. 📗 Check out the examples."
  }
}